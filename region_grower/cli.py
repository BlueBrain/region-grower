"""App module that defines the command line interface."""
import click

# pylint: disable=redefined-outer-name


@click.group()
def cli():
    """A tool for space synthesis management."""


@cli.command(short_help="Generate the TMD parameter file")
@click.argument("input_folder", type=str, required=True)
@click.argument(
    "dat_file", type=str, required=True,
)
@click.option(
    "-dc",
    "--diametrizer-config",
    type=click.File("r"),
    default=None,
    help="config file for diametrizer",
)
@click.option(
    "-tp",
    "--tmd-parameters",
    type=click.File("r"),
    default=None,
    help="tmd_parameter json if different from default generated by TMD",
)
@click.option(
    "-pf",
    "--parameter-filename",
    type=click.Path(file_okay=True, dir_okay=False),
    default="tmd_parameters.json",
    help="name of outputed .json file",
)
@click.option(
    "-e",
    "--ext",
    type=click.Choice([".h5", ".swc", ".asc"]),
    default=".h5",
    help="extension for neuron files",
)
def generate_parameters(
    input_folder, dat_file, parameter_filename, diametrizer_config, tmd_parameters, ext,
):
    """Generate JSON files containing the TMD parameters for
    each mtype in input_folder, using dat_file for mtypes

    Args:
        input_folder: folder containing cells (required)
        dat_file: .dat file with mtype for each cell (required)
    """
    from .generate import generate_parameters

    generate_parameters(
        input_folder,
        dat_file,
        parameter_filename,
        diametrizer_config,
        tmd_parameters,
        ext,
    )


@cli.command(short_help="Create the TMD distribution file")
@click.argument(
    "input_folder", type=str, required=True,
)
@click.argument(
    "dat_file", type=str, required=True,
)
@click.option(
    "-df",
    "--distribution-filename",
    type=click.Path(file_okay=True, dir_okay=False),
    default="tmd_distributions.json",
    help="name of outputed .json file",
)
@click.option(
    "-dc",
    "--diametrizer-config",
    type=click.File("r"),
    default=None,
    help="config file for diametrizer",
)
@click.option(
    "-e",
    "--ext",
    type=click.Choice([".h5", ".swc", ".asc"]),
    default=".h5",
    help="extension for neuron files",
)
def generate_distributions(
    input_folder, dat_file, distribution_filename, diametrizer_config, ext,
):
    """Generate JSON files containing the TMD distributions for
    each mtype in input_folder, using dat_file for mtypes.

     Args:
        input_folder: folder containing cells (required)
        dat_file: .dat file with mtype for each cell (required)
    """
    from .generate import generate_distributions

    generate_distributions(
        input_folder, dat_file, distribution_filename, diametrizer_config, ext
    )
