"""App module that defines the command line interface"""
import json
import logging
from functools import partial

import click
from tqdm import tqdm

from tns import extract_input
from diameter_synthesis import build_models
from region_grower.utils import NumpyEncoder, create_morphologies_dict

L = logging.getLogger(__name__)


@click.group()
def cli():
    """A tool for space synthesis management"""


@cli.command(short_help="Generate the TMD parameter file")
@click.argument("input_folder", type=str, required=True)
@click.argument(
    "dat_file", type=str, required=True,
)
@click.option(
    "-dc",
    "--diametrizer-config",
    type=click.File("r"),
    default=None,
    help="config file for diametrizer",
)
@click.option(
    "-tp",
    "--tmd-parameters",
    type=click.File("r"),
    default=None,
    help="tmd_parameter json if different from default generated by TMD",
)
@click.option(
    "-pf",
    "--parameter-filename",
    type=click.Path(file_okay=True, dir_okay=False),
    default="tmd_parameters.json",
    help="name of outputed .json file",
)
@click.option(
    "-e",
    "--ext",
    type=click.Choice([".h5", ".swc", ".asc"]),
    default=".h5",
    help="extension for neuron files",
)
def generate_parameters(
    input_folder, dat_file, parameter_filename, diametrizer_config, tmd_parameters, ext
):
    """Generate JSON files containing the TMD parameters for
    each mtype in input_folder, using dat_file for mtypes

    Args:
        input_folder: folder containing cells (required)
        dat_file: .dat file with mtype for each cell (required)
    """

    L.info("Extracting TMD parameters for each mtype...")
    morphologies_dict = create_morphologies_dict(dat_file, input_folder, ext=ext)

    neurite_types = ["basal", "apical"]

    if diametrizer_config is not None:
        diametrizer_config = json.load(diametrizer_config)

    if tmd_parameters is not None:
        tmd_parameters = json.load(tmd_parameters)

    def get_parameters(mtype):
        """allow for precomputed tmd_parameter to be stacked with diameter parameters"""
        if tmd_parameters is None:
            return extract_input.parameters(
                neurite_types=neurite_types, diameter_parameters=diametrizer_config,
            )
        if tmd_parameters is not None and diametrizer_config is not None:
            try:
                parameters = tmd_parameters[mtype]
            except KeyError:
                L.error("%s is not in the given tmd_parameter.json", mtype)
                parameters = {}
            parameters["diameter_params"] = diametrizer_config
            parameters["diameter_params"]["method"] = "external"
            return parameters
        return tmd_parameters[mtype]

    parameters = {
        mtype: get_parameters(mtype) for mtype in tqdm(morphologies_dict.keys())
    }

    with open(parameter_filename, "w") as f:
        json.dump(parameters, f, cls=NumpyEncoder, indent=4)


@cli.command(short_help="Create the TMD distribution file")
@click.argument(
    "input_folder", type=str, required=True,
)
@click.argument(
    "dat_file", type=str, required=True,
)
@click.option(
    "-df",
    "--distribution-filename",
    type=click.Path(file_okay=True, dir_okay=False),
    default="tmd_distributions.json",
    help="name of outputed .json file",
)
@click.option(
    "-dc",
    "--diametrizer-config",
    type=click.File("r"),
    default=None,
    help="config file for diametrizer",
)
@click.option(
    "-e",
    "--ext",
    type=click.Choice([".h5", ".swc", ".asc"]),
    default=".h5",
    help="extension for neuron files",
)
def generate_distributions(
    input_folder, dat_file, distribution_filename, diametrizer_config, ext
):
    """Generate JSON files containing the TMD distributions for
    each mtype in input_folder, using dat_file for mtypes

     Args:
        input_folder: folder containing cells (required)
        dat_file: .dat file with mtype for each cell (required)
    """

    L.info("Extracting TMD distributions for each mtype.\n" "This can take a while...")

    morphologies_dict = create_morphologies_dict(dat_file, input_folder, ext=ext)

    metadata = {"cortical_thickness": [165, 149, 353, 190, 525, 700]}
    neurite_types = ["basal", "apical"]

    config = None
    diameter_model_function = None
    if diametrizer_config is not None:
        config = json.load(diametrizer_config)
        diameter_model_function = partial(build_models.build, config=config)

    L.info("Extracting TMD distributions for each mtype...")

    distributions = {
        mtype: extract_input.distributions(
            morphologies_dict[mtype],
            neurite_types=neurite_types,
            diameter_input_morph=morphologies_dict[mtype],
            diameter_model=diameter_model_function,
        )
        for mtype in tqdm(morphologies_dict.keys())
    }

    tmd_results = {"mtypes": distributions, "metadata": metadata}

    with open(distribution_filename, "w") as f:
        json.dump(tmd_results, f, cls=NumpyEncoder, indent=4)
